/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package mixin_labs.java.bot;
import mixin.java.sdk.MixinBot;
import mixin.java.sdk.MixinUtil;
import mixin.java.sdk.MIXIN_Category;
import mixin.java.sdk.MIXIN_Action;
import java.util.UUID;

import java.security.PrivateKey;
import java.security.interfaces.RSAPrivateKey;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonArray;

// import java.util.Base64;
import org.apache.commons.codec.binary.Base64;
import okhttp3.Response;
import okhttp3.WebSocket;
import okhttp3.WebSocketListener;
import okio.ByteString;


public class App {

    public static void main(String[] args) {
        MixinBot.connectToRemoteMixin(new WebSocketListener() {
        @Override
        public void onOpen(WebSocket webSocket, Response response) {
          System.out.println("[onOpen !!!]");
          System.out.println("request header:" + response.request().headers());
          System.out.println("response header:" + response.headers());
          System.out.println("response:" + response);

          // 请求获取所有 pending 的消息
          MixinBot.sendListPendingMessages(webSocket);
        }

        @Override
        public void onMessage(WebSocket webSocket, String text) {
          System.out.println("[onMessage !!!]");
          System.out.println("text: " + text);
        }

        @Override
        public void onMessage(WebSocket webSocket, ByteString bytes) {
          try {
            System.out.println("[onMessage:]");
            String msgIn = MixinUtil.bytesToJsonStr(bytes);
            System.out.println("json: " + msgIn);
            JsonObject obj = new JsonParser().parse(msgIn).getAsJsonObject();
            MIXIN_Action action = MIXIN_Action.parseFrom(obj);
            System.out.println(action);
            MIXIN_Category category = MIXIN_Category.parseFrom(obj);
            // System.out.println(category);
            if (action == MIXIN_Action.CREATE_MESSAGE && obj.get("data") != null &&
                category != null ) {
              String userId;
              String messageId = obj.get("data").getAsJsonObject().get("message_id").getAsString();
              MixinBot.sendMessageAck(webSocket, messageId);
              switch (category) {
                case PLAIN_TEXT:
                    String conversationId =
                      obj.get("data").getAsJsonObject().get("conversation_id").getAsString();
                    userId =
                      obj.get("data").getAsJsonObject().get("user_id").getAsString();
                    byte[] msgData = Base64.decodeBase64(obj.get("data").getAsJsonObject().get("data").getAsString());
                    String msgP = new String(msgData,"UTF-8");
                    System.out.println(msgP);
                    if (msgP.toLowerCase().equals("pay")) {
                      System.out.println("---------------------pay card output!");
                      MixinBot.sendAppCard(webSocket,
                                          Config.CLIENT_ID,
                                          "6cfe566e-4aad-470b-8c9a-2fd35b49c68d",
                                          "0.0001",
                                          conversationId);
                    } else if (msgP.toLowerCase().equals("contact")) {
                      MixinBot.sendContact(
                        webSocket,
                        conversationId,
                        userId,
                        "0c21b607-5e5b-461b-963f-95708346c21d");
                    } else if (msgP.toLowerCase().equals("sticker")) {
                          MixinBot.sendSticker(
                            webSocket,
                            conversationId,
                            userId,
                            "eyJhbGJ1bV9pZCI6IjM2ZTk5NzdjLTJiYWItNDNjYS1hMmI2LTdlMDFmNWViNjhkZSIsIm5hbWUiOiJpbGx1c2lvbiJ9");
                    } else if (msgP.toLowerCase().equals("appsgroup")) {
                      String payLinkEOS = "https://mixin.one/pay?recipient=" +
                                     Config.CLIENT_ID  + "&asset=" +
                                     "6cfe566e-4aad-470b-8c9a-2fd35b49c68d"   +
                                     "&amount=" + "0.1" +
                                     "&trace="  + UUID.randomUUID().toString() +
                                     "&memo=";
                      JsonObject msgJsEOS = new JsonObject();
                      msgJsEOS.addProperty("label", "Pay 0.1 EOS");
                      msgJsEOS.addProperty("color", "#0080FF");
                      msgJsEOS.addProperty("action",payLinkEOS);


                      String payLinkBTC = "https://mixin.one/pay?recipient=" +
                                     Config.CLIENT_ID  + "&asset=" +
                                     "c6d0c728-2624-429b-8e0d-d9d19b6592fa"   +
                                     "&amount=" + "0.001" +
                                     "&trace="  + UUID.randomUUID().toString() +
                                     "&memo=";
                      JsonObject msgJsBTC = new JsonObject();
                      msgJsBTC.addProperty("label", "Pay 0.001 BTC");
                      msgJsBTC.addProperty("color", "#FF8000");
                      msgJsBTC.addProperty("action",payLinkBTC);

                      JsonArray msgArr = new JsonArray();
                      msgArr.add(msgJsEOS);//button for EOS
                      msgArr.add(msgJsBTC);//button for Bitcoin

                      JsonObject msgParams = new JsonObject();
                      msgParams.addProperty("conversation_id",conversationId);
                      msgParams.addProperty("category","APP_BUTTON_GROUP");
                      msgParams.addProperty("status","SENT");
                      msgParams.addProperty("message_id",UUID.randomUUID().toString());
                      msgParams.addProperty("data",new String(Base64.encodeBase64(msgArr.toString().getBytes())));

                      MixinBot.send(webSocket, MIXIN_Action.CREATE_MESSAGE, msgParams.toString());
                    } else MixinBot.sendText(webSocket,conversationId,userId,msgP);
                    break;
                case SYSTEM_ACCOUNT_SNAPSHOT:
                    userId =
                      obj.get("data").getAsJsonObject().get("user_id").getAsString();
                    byte[] JsData = Base64.decodeBase64(obj.get("data").getAsJsonObject().get("data").getAsString());
                    String JsStr = new String(JsData);
                    System.out.println("SYSTEM_ACCOUNT_SNAPSHOT json: " + JsStr);
                    JsonObject jsObj = new JsonParser().parse(JsStr).getAsJsonObject();
                    if (jsObj.get("amount").getAsFloat() > 0) {
                      String encryptPin = MixinUtil.encryptPayKey(Config.PIN,Config.PAY_KEY);
                      MixinBot.transfer(
                          jsObj.get("asset_id").getAsString(),
                          jsObj.get("opponent_id").getAsString(),
                          jsObj.get("amount").getAsString(),
                          encryptPin,
                          Config.RSA_PRIVATE_KEY,
                          Config.CLIENT_ID,
                          Config.SESSION_ID
                      );
                    }
                    break;
                default:
                    System.out.println("Category: " + category);
              }
            }
          } catch (Exception e) {
            e.printStackTrace();
          }
        }

        @Override
        public void onClosing(WebSocket webSocket, int code, String reason) {
          System.out.println("[onClosing !!!]");
          System.out.println("code: " + code);
          System.out.println("reason: " + reason);
        }

        @Override
        public void onClosed(WebSocket webSocket, int code, String reason) {
          System.out.println("[onClosed !!!]");
          System.out.println("code: " + code);
          System.out.println("reason: " + reason);
        }

        @Override
        public void onFailure(WebSocket webSocket, Throwable t, Response response) {
          System.out.println("[onFailure !!!]");
          System.out.println("throwable: " + t);
          System.out.println("response: " + response);
        }
      }, Config.RSA_PRIVATE_KEY, Config.CLIENT_ID, Config.SESSION_ID);
    }
}
