/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bitcoin_wallet.java;

import mixin.java.sdk.MixinHttpUtil;
import mixin.java.sdk.MixinAPI;
import java.security.PrivateKey;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;

import javax.crypto.Cipher;
import java.io.UnsupportedEncodingException;
import java.security.GeneralSecurityException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.interfaces.RSAPrivateKey;
import java.security.interfaces.RSAPublicKey;
import java.security.spec.KeySpec;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.RSAPrivateCrtKeySpec;
import org.bouncycastle.jce.provider.BouncyCastleProvider;
import mixin.java.sdk.PrivateKeyReader;

import java.util.Base64;
import java.security.Key;
import java.io.FileNotFoundException;
import java.nio.ByteBuffer;
import java.io.IOException;
// import java.security.NoSuchAlgorithmException;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.UUID;
import java.util.Map;
import java.io.Console;
import java.nio.file.StandardOpenOption;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

import org.msgpack.core.MessagePack;
import org.msgpack.core.MessagePack.PackerConfig;
import org.msgpack.core.MessagePack.UnpackerConfig;
import org.msgpack.core.MessageBufferPacker;
import org.msgpack.core.MessageFormat;
import org.msgpack.core.MessagePacker;
import org.msgpack.core.MessageUnpacker;
import org.msgpack.value.Value;
import org.msgpack.value.BinaryValue;
import org.msgpack.value.MapValue;
import org.msgpack.value.ValueFactory;

public class App {

    private static final String EXIN_BOT         = "61103d28-3ac2-44a2-ae34-bd956070dab1";
    private static final String OCEANONE_BOT     = "aaff5bef-42fb-4c9f-90e0-29f69176b7d4";
    private static final String BTC_ASSET_ID     = "c6d0c728-2624-429b-8e0d-d9d19b6592fa";
    // private static final String BTC_ASSET_ID     = "965e5c6e-434c-3fa9-b780-c50f43cd955c";
    private static final String EOS_ASSET_ID     = "6cfe566e-4aad-470b-8c9a-2fd35b49c68d";
    private static final String USDT_ASSET_ID    = "815b0b1a-2764-3736-8faa-42d694fa620a";
    private static final String ETC_ASSET_ID     = "2204c1ee-0ea2-4add-bb9a-b3719cfff93a";
    private static final String XRP_ASSET_ID     = "23dfb5a5-5d7b-48b6-905f-3970e3176e27";
    private static final String XEM_ASSET_ID     = "27921032-f73e-434e-955f-43d55672ee31";
    private static final String ETH_ASSET_ID     = "43d61dcd-e413-450d-80b8-101d5e903357";
    private static final String DASH_ASSET_ID    = "6472e7e3-75fd-48b6-b1dc-28d294ee1476";
    private static final String DOGE_ASSET_ID    = "6770a1e5-6086-44d5-b60f-545f9d9e8ffd";
    private static final String LTC_ASSET_ID     = "76c802a2-7c88-447f-a93e-c29c9e5dd9c8";
    private static final String SIA_ASSET_ID     = "990c4c29-57e9-48f6-9819-7d986ea44985";
    private static final String ZEN_ASSET_ID     = "a2c5d22b-62a2-4c13-b3f0-013290dbac60";
    private static final String ZEC_ASSET_ID     = "c996abc9-d94e-4494-b1cf-2a3fd3ac5714";
    private static final String BCH_ASSET_ID     = "fd11b6e3-0b87-41f1-a41f-f0e9b49e5bf0";
    private static final String XIN_ASSET_ID     = "c94ac88f-4671-3976-b60a-09064f1811e8";
    private static final String CNB_ASSET_ID     = "965e5c6e-434c-3fa9-b780-c50f43cd955c";
    private static final String BTC_WALLET_ADDR  = "14T129GTbXXPGXXvZzVaNLRFPeHXD1C25C";
    private static final String MASTER_UUID      = "0b4f49dc-8fb4-4539-9a89-fb3afc613747";
    // private static final String MASTER_UUID      = "369db92b-5319-366c-a7ce-738e7e8e8fd6";
    private static final String WALLET_FILANAME  = "./mybitcoin_wallet.csv";
    private static final String EOS_THIRD_EXCHANGE_NAME
                                                 = "huobideposit";
    private static final String EOS_THIRD_EXCHANGE_TAG
                                                 = "1872050";
    public static void main(String[] args) {
        MixinAPI mixinApi = new MixinAPI(Config.CLIENT_ID, Config.CLIENT_SECRET,
                                         Config.PIN, Config.SESSION_ID, Config.PIN_TOKEN,
                                         Config.RSA_PRIVATE_KEY);

        do {
          String PromptMsg;
          PromptMsg  = "1: Create Bitcoin Wallet and update PIN\n2: Read Bitcoin balance & address \n3: Read USDT balance & address\n4: Read EOS balance & address\n";
          PromptMsg += "tbb:Transfer BTC from Bot to Wallet\ntbm:Transfer BTC from Wallet to Master\n";
          PromptMsg += "teb:Transfer EOS from Bot to Wallet\ntem:Transfer EOS from Wallet to Master\n";
          PromptMsg += "tub:Transfer USDT from Bot to Wallet\ntum:Transfer USDT from Wallet to Master\n";
          PromptMsg += "tcb:Transfer CNB from Bot to Wallet\ntcm:Transfer CNB from Wallet to Master\n";
          PromptMsg += "5: Pay 0.0001 BTC to ExinCore buy USDT\n6: Pay $1 USDT to ExinCore buy BTC\n7: Read Snapshots\n8: Fetch market price(USDT)\n9: Fetch market price(BTC)\n";
          PromptMsg += "v: Verify Wallet Pin\nwb: Withdraw BTC\nwe: WitchDraw EOS\na: Read All Assets Infos\n";
          PromptMsg += "o: Ocean.One Exchange\nq: Exit \nMake your choose(eg: q for Exit!): ";
          System.out.print(PromptMsg);
          String input = System.console().readLine();
          System.out.println(input);
          if ( input.equals("q") ) { System.exit(0); }
          if ( input.equals("1") ) {

          try {
            KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
            kpg.initialize(1024);
            KeyPair kp = kpg.genKeyPair();

            RSAPrivateKey priv = (RSAPrivateKey) kp.getPrivate();
            RSAPublicKey pub = (RSAPublicKey) kp.getPublic();

            String SessionSecret = Base64.getEncoder().encodeToString(pub.getEncoded());
            JsonObject walletInfo = mixinApi.createUser("java wallet",SessionSecret);
            System.out.println(walletInfo.get("session_id").getAsString());

            BufferedWriter writer = Files.newBufferedWriter(Paths.get(WALLET_FILANAME),
                                                            StandardOpenOption.CREATE,
                                                            StandardOpenOption.APPEND);
            CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT.withDelimiter(','));
            csvPrinter.printRecord(Arrays.asList(Base64.getEncoder().encodeToString(priv.getEncoded()),
                                  walletInfo.get("pin_token").getAsString(),
                                  walletInfo.get("session_id").getAsString(),
                                  walletInfo.get("user_id").getAsString()));
            csvPrinter.flush();
            MixinAPI mixinApiUser = generateAPI_FromCSV();
            JsonObject asset = mixinApiUser.updatePin("","123456");
            System.out.println(asset);
          } catch(Exception e) { e.printStackTrace(); }
        }
        if ( input.equals("2") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject asset = mixinApiUser.getAsset(BTC_ASSET_ID);
         System.out.println(asset);
         System.out.println("------------------------BTC------Information---------------------------");
         System.out.println("The BTC wallet address is " + asset.get("public_key").getAsString());
         System.out.println("The BTC wallet balance is " + asset.get("balance").getAsString());
         System.out.println("-----------------------------------------------------------------------");
        }
        if ( input.equals("3") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject asset = mixinApiUser.getAsset(USDT_ASSET_ID);
         System.out.println(asset);
         System.out.println("------------------------USDT------Information---------------------------");
         System.out.println("The USDT wallet address is " + asset.get("public_key").getAsString());
         System.out.println("The USDT wallet balance is " + asset.get("balance").getAsString());
         System.out.println("-----------------------------------------------------------------------");
        }
        if ( input.equals("4") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject asset = mixinApiUser.getAsset(EOS_ASSET_ID);
         System.out.println(asset);
         System.out.println("------------------------EOS------Information---------------------------");
         System.out.println("The EOS wallet Name is " + asset.get("account_name").getAsString() +
                            " Tag is " + asset.get("account_tag").getAsString());
         System.out.println("The EOS wallet balance is " + asset.get("balance").getAsString());
         System.out.println("-----------------------------------------------------------------------");
        }
        if ( input.equals("5") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         UUID usdtUUID         =  UUID.fromString(USDT_ASSET_ID);
         String memoTarget     = encodeUUID(usdtUUID);
         System.out.println("------------------------USDT-BTC-EXCHANGE----------------------------");
         System.out.println(memoTarget);
         JsonObject asset = mixinApiUser.getAsset(BTC_ASSET_ID);
         System.out.println(asset);
         System.out.println(asset.get("balance").getAsFloat());
         if ( (asset.get("balance").getAsFloat() * 10000) >= 1 ) {
             JsonObject transInfo = mixinApiUser.transfer(BTC_ASSET_ID, EXIN_BOT,
                                                        "0.0001",memoTarget);
             System.out.println("------------------------BTC Transfer To EXCHANGE Information----------------------");
             System.out.println(transInfo);
             System.out.println("-----------------------------------------------------------------------");
          } else System.out.println("-----------------------------------------------------------------------");
        }
        if ( input.equals("6") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         UUID btcUUID          =  UUID.fromString(BTC_ASSET_ID);
         String memoTarget     = encodeUUID(btcUUID);
         System.out.println(memoTarget);
         System.out.println("-------------------------BTC-USDT-EXCHANGE----------------------------");
         JsonObject asset = mixinApiUser.getAsset(BTC_ASSET_ID);
         System.out.println(asset);
         if ( asset.get("balance").getAsFloat() >= 1 ) {
             JsonObject transInfo = mixinApiUser.transfer(USDT_ASSET_ID, EXIN_BOT,
                                                        "1",memoTarget);
             System.out.println("------------------------USDT-BTC  EXCHANGE Information----------------------");
             System.out.println(transInfo);
             System.out.println("-----------------------------------------------------------------------");
          } else System.out.println("-----------------------------------------------------------------------");
        }
        if ( input.equals("7") ) {
          MixinAPI mixinApiUser = generateAPI_FromCSV();
          String transDatetime  = "";
          String assetUUID      = "";
          if ( mixinApiUser.getClientID().equals("091651f2-19c3-34f0-b45e-724ff203d921") ) {
            transDatetime = "2019-04-19T06:53:22.593529Z";
            assetUUID     = USDT_ASSET_ID;
          } else {
            System.out.print("Input the transaction Date time (eg:2019-04-19T06:53:22.593529Z):");
            transDatetime = System.console().readLine();
          }
          JsonArray snapshots = mixinApiUser.getSnapshots(assetUUID,3,transDatetime,"ASC");
          // System.out.println(snapshots);
          System.out.println("-------------------------get-Snapshots---------------------------------------------");
          snapshots.forEach((element) ->  {
             JsonObject jsonObj = element.getAsJsonObject();
             if ( jsonObj.get("amount").getAsFloat() > 0 && jsonObj.get("data") != null ) {
               System.out.println(jsonObj.get("data").getAsString() );
               try {
               byte[] encoded = Base64.getDecoder().decode(jsonObj.get("data").getAsString());
               MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(encoded);
               Value memoVal = unpacker.unpackValue();
               if ( memoVal.isMapValue()) {
                 Map<Value, Value> map = memoVal.asMapValue().map();
                 if ( map.get(ValueFactory.newString("C")).asIntegerValue().asInt() == 1000 ) {
                   System.out.println("Exchange successful" + " Code: " +
                                      map.get(ValueFactory.newString("C")).asIntegerValue());
                   System.out.println("Price is " + map.get(ValueFactory.newString("P")).asStringValue());
                   System.out.println("Fee is " + map.get(ValueFactory.newString("F")).asStringValue());
                   System.out.println("Type is " + map.get(ValueFactory.newString("T")).asStringValue());
                   ByteBuffer AssetBinValue = map.get(ValueFactory.newString("FA")).asRawValue().asByteBuffer();
                   System.out.println("Fee is asset UUID is  " + ByteBufferAsUuid(AssetBinValue));
                   ByteBuffer TraceBinValue = map.get(ValueFactory.newString("O")).asRawValue().asByteBuffer();
                   System.out.println("The trace id is " + ByteBufferAsUuid(TraceBinValue));
                }
               }
              } catch(Exception e) { e.printStackTrace(); }
             }
          });
          System.out.println("---------------------end-of-get-Snapshots---------------------------------------------");
        }
        //snapshots buy usdt sell btc
        //2019-04-19T06:53:20.186821325Z
        if ( input.equals("8") ) {
         JsonArray res = FetchExinOneMarketInfos(USDT_ASSET_ID);
         System.out.println("--exchange_asset--exchange_asset_symbol/base_asset_symbol--price--minimum--maximum--exchanges--");
         // System.out.println(res);
         res.forEach((element) ->  {
            JsonObject jsonObj = element.getAsJsonObject();
            System.out.println(jsonObj.get("exchange_asset").getAsString() + " " +
                               jsonObj.get("exchange_asset_symbol").getAsString() + "/" +
                               jsonObj.get("base_asset_symbol").getAsString() + " " +
                               jsonObj.get("price").getAsString() + " " +
                               jsonObj.get("minimum_amount").getAsString() + " " +
                               jsonObj.get("maximum_amount").getAsString() + " " +
                               jsonObj.get("exchanges").getAsString() );
         });
         System.out.println("-----------------------------------------------------------------------");
        }
        if ( input.equals("9") ) {
         JsonArray res = FetchExinOneMarketInfos(BTC_ASSET_ID);
         System.out.println("-exchange_asset-base_asset_symbol-price-minimum_amount-maximum_amount-exchanges--");
         // System.out.println(res);
         res.forEach((element) ->  {
            JsonObject jsonObj = element.getAsJsonObject();
            System.out.println(jsonObj.get("exchange_asset").getAsString() + " " +
                               jsonObj.get("exchange_asset_symbol").getAsString() + "/" +
                               jsonObj.get("base_asset_symbol").getAsString() + " " +
                               jsonObj.get("price").getAsString() + " " +
                               jsonObj.get("minimum_amount").getAsString() + " " +
                               jsonObj.get("maximum_amount").getAsString() + " " +
                               jsonObj.get("exchanges").getAsString() );
         });
         System.out.println("-----------------------------------------------------------------------");
        }
        if ( input.equals("wb") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject addrInfo = mixinApiUser.createWithdrawAddress(BTC_ASSET_ID,
                                                                BTC_WALLET_ADDR,"","","123456","hi");
         System.out.println(addrInfo);
         System.out.println("------------------------BTC---Withdrawal---Information---------------------------");
         System.out.println("The BTC Witchdrawal address is " + addrInfo.get("public_key").getAsString());
         System.out.println("The BTC withdraw fee  is " + addrInfo.get("fee").getAsString());
         // JsonObject addrInfo2 = mixinApiUser.delAddress(addrInfo.get("address_id").getAsString(),"123456");
         // System.out.println(addrInfo2);
         // JsonObject addrInfo3 = mixinApiUser.getAddress(addrInfo.get("address_id").getAsString());
         // System.out.println(addrInfo3);
         System.out.print("Input the BTC withdraw amount:");
         String eosAmount = System.console().readLine();
         JsonObject withdrawInfo = mixinApiUser.withdrawals(addrInfo.get("address_id").getAsString(),
                                                        eosAmount,"","123456","memo");
         System.out.println(withdrawInfo);
         System.out.println("-----------------------------------------------------------------------");
        }
        if ( input.equals("we") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject addrInfo = mixinApiUser.createWithdrawAddress(EOS_ASSET_ID,"",
                                                                EOS_THIRD_EXCHANGE_NAME,
                                                                EOS_THIRD_EXCHANGE_TAG,
                                                                "123456","hi");
         System.out.println(addrInfo);
         System.out.println("------------------------EOS---Withdrawal---Information---------------------------");
         System.out.println("The EOS wallet name is " + addrInfo.get("account_name").getAsString() + " " +
                            addrInfo.get("account_tag").getAsString());
         System.out.println("The EOS withdraw fee  is " + addrInfo.get("fee").getAsString());
         System.out.print("Input the EOS withdraw amount:");
         String eosAmount = System.console().readLine();
         JsonObject withdrawInfo = mixinApiUser.withdrawals(addrInfo.get("address_id").getAsString(),
                                                        eosAmount,"","123456","memo");
         System.out.println(withdrawInfo);
         System.out.println("-----------------------------------------------------------------------");
        }
        if ( input.equals("tbb") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject asset = mixinApi.getAsset(BTC_ASSET_ID);
         System.out.println(asset);
         if ( asset.get("balance").getAsFloat() > 0 ) {
             JsonObject transInfo = mixinApi.transfer(BTC_ASSET_ID,mixinApiUser.getClientID(),
                                                      asset.get("balance").getAsString(),"hi");
             System.out.println("------------------------BTC Transfer from Bot Information---------------------------");
             System.out.println(transInfo);
             System.out.println("-----------------------------------------------------------------------");
          }
        }
        if ( input.equals("tbm") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject asset = mixinApiUser.getAsset(BTC_ASSET_ID);
         System.out.println(asset);
         if ( asset.get("balance").getAsFloat() > 0 ) {
             JsonObject transInfo = mixinApiUser.transfer(BTC_ASSET_ID, MASTER_UUID,
                                                        asset.get("balance").getAsString(),"hi");
             System.out.println("------------------------BTC Transfer To Master Information---------------------------");
             System.out.println(transInfo);
             System.out.println("-----------------------------------------------------------------------");
          }
        }
        if ( input.equals("tcb") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject asset = mixinApi.getAsset(CNB_ASSET_ID);
         System.out.println(asset);
         if ( asset.get("balance").getAsFloat() > 0 ) {
             JsonObject transInfo = mixinApi.transfer(CNB_ASSET_ID,mixinApiUser.getClientID(),
                                                      asset.get("balance").getAsString(),"hi");
             System.out.println("------------------------BTC Transfer from Bot Information---------------------------");
             System.out.println(transInfo);
             System.out.println("-----------------------------------------------------------------------");
          }
        }
        if ( input.equals("tbm") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject asset = mixinApiUser.getAsset(CNB_ASSET_ID);
         System.out.println(asset);
         if ( asset.get("balance").getAsFloat() > 0 ) {
             JsonObject transInfo = mixinApiUser.transfer(CNB_ASSET_ID, MASTER_UUID,
                                                        asset.get("balance").getAsString(),"hi");
             System.out.println("------------------------BTC Transfer To Master Information---------------------------");
             System.out.println(transInfo);
             System.out.println("-----------------------------------------------------------------------");
          }
        }
        if ( input.equals("teb") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject asset = mixinApi.getAsset(EOS_ASSET_ID);
         System.out.println(asset);
         if ( asset.get("balance").getAsFloat() > 0 ) {
             JsonObject transInfo = mixinApi.transfer(EOS_ASSET_ID,mixinApiUser.getClientID(),
                                                      asset.get("balance").getAsString(),"hi");
             System.out.println("------------------------EOS Transfer from Bot Information---------------------------");
             System.out.println(transInfo);
             System.out.println("-----------------------------------------------------------------------");
          }
        }
        if ( input.equals("tem") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject asset = mixinApiUser.getAsset(EOS_ASSET_ID);
         System.out.println(asset);
         if ( asset.get("balance").getAsFloat() > 0 ) {
             JsonObject transInfo = mixinApiUser.transfer(EOS_ASSET_ID, MASTER_UUID,
                                                        asset.get("balance").getAsString(),"hi");
             System.out.println("------------------------EOS Transfer To Master Information---------------------------");
             System.out.println(transInfo);
             System.out.println("-----------------------------------------------------------------------");
          }
        }
        if ( input.equals("tub") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject asset = mixinApi.getAsset(USDT_ASSET_ID);
         System.out.println(asset);
         if ( asset.get("balance").getAsFloat() > 0 ) {
             JsonObject transInfo = mixinApi.transfer(USDT_ASSET_ID,mixinApiUser.getClientID(),
                                                      asset.get("balance").getAsString(),"hi");
             System.out.println("------------------------USDT Transfer from Bot Information---------------------------");
             System.out.println(transInfo);
             System.out.println("-----------------------------------------------------------------------");
          }
        }
        if ( input.equals("tum") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject asset = mixinApiUser.getAsset(USDT_ASSET_ID);
         System.out.println(asset);
         if ( asset.get("balance").getAsFloat() > 0 ) {
             JsonObject transInfo = mixinApiUser.transfer(USDT_ASSET_ID, MASTER_UUID,
                                                        asset.get("balance").getAsString(),"hi");
             System.out.println("------------------------USDT Transfer To Master Information---------------------------");
             System.out.println(transInfo);
             System.out.println("-----------------------------------------------------------------------");
          }
        }
        if ( input.equals("v") ) {
         MixinAPI mixinApiUser = generateAPI_FromCSV();
         JsonObject asset = mixinApiUser.verifyPin("123456");
         System.out.println(asset);
        }
        if ( input.equals("a") ) {
          MixinAPI mixinApiUser = generateAPI_FromCSV();
          JsonArray assets = mixinApiUser.getAssets();
          System.out.println("------------------------All Assets Information---------------------------");
          System.out.println(assets);
          assets.forEach((element) ->  {
             JsonObject jsonObj = element.getAsJsonObject();
             System.out.println(jsonObj.get("asset_id").getAsString() + " " +
                                jsonObj.get("symbol").getAsString() + " " +
                                jsonObj.get("balance").getAsString() );
          });
          System.out.println("-----------------------------------------------------------------------");
        }
        if ( input.equals("o") ) {
          do {
            String OceanMsg;
            OceanMsg  =  "1:  Orders-Book of BTC/USDT\nb1: Buy BTC pay USDT\ns1: Sell BTC get USDT\n";
            OceanMsg  += "2:  Orders-Book of EOS/USDT \nb2: Buy EOS pay USDT\ns2: Sell EOS get USDT\n";
            OceanMsg  += "3:  Orders-Book of XIN/USDT \nb3: Buy XIN pay USDT\ns3: Sell XIN get USDT\n";
            OceanMsg  += "4:  Orders-Book of XIN/BTC\nb4: Buy XIN pay BTC\ns4: Sell XIN get BTC\n";
            OceanMsg  += "5:  Orders-Book of EOS/BTC\nb4: Buy EOS pay BTC\ns4: Sell EOS get BTC\n";
            OceanMsg  += "6:  Orders-Book of SC/BTC \nb6: Buy SC pay BTC\ns6: Sell SC get BTC\n";
            OceanMsg  += "7:  Orders-Book of EOS/XIN\nb7: Buy EOS pay XIN\ns7: Sell EOS get XIN\n";
            OceanMsg  += "8:  Orders-Book of ETH/XIN\nb8: Buy ETH pay XIN\ns8: Sell EOS get XIN\n";
            OceanMsg  += "9:  Orders-Book of SC/XIN\nb9: Buy SC pay XIN\ns9: Sell SC get XIN\n";
            OceanMsg  += "c: Cancel the order\nq: Exit\n";

            System.out.print(OceanMsg);
            String subinput = System.console().readLine();
            System.out.println(subinput);
            if ( subinput.equals("q") ) { break; }
            if ( subinput.equals("1") ) {
              FetchOceanMarketInfos(BTC_ASSET_ID,USDT_ASSET_ID);
            }
            if ( subinput.equals("2") ) {
              FetchOceanMarketInfos(EOS_ASSET_ID,USDT_ASSET_ID);
            }
            if ( subinput.equals("s2") ) {
              MakeTheSellOrder(EOS_ASSET_ID,USDT_ASSET_ID);
            }
            if ( subinput.equals("b2") ) {
              MakeTheBuyOrder(EOS_ASSET_ID,USDT_ASSET_ID);
            }
            if ( subinput.equals("3") ) {
              FetchOceanMarketInfos(XIN_ASSET_ID,USDT_ASSET_ID);
            }
            if ( subinput.equals("s3") ) {
              MakeTheSellOrder(XIN_ASSET_ID,USDT_ASSET_ID);
            }
            if ( subinput.equals("b3") ) {
              MakeTheBuyOrder(XIN_ASSET_ID,USDT_ASSET_ID);
            }
            if ( subinput.equals("4") ) {
              FetchOceanMarketInfos(XIN_ASSET_ID,BTC_ASSET_ID);
            }
            if ( subinput.equals("s4") ) {
              MakeTheSellOrder(XIN_ASSET_ID,BTC_ASSET_ID);
            }
            if ( subinput.equals("b4") ) {
              MakeTheBuyOrder(XIN_ASSET_ID,BTC_ASSET_ID);
            }
            if ( subinput.equals("5") ) {
              FetchOceanMarketInfos(EOS_ASSET_ID,BTC_ASSET_ID);
            }
            if ( subinput.equals("s5") ) {
              MakeTheSellOrder(EOS_ASSET_ID,BTC_ASSET_ID);
            }
            if ( subinput.equals("b5") ) {
              MakeTheBuyOrder(EOS_ASSET_ID,BTC_ASSET_ID);
            }
            if ( subinput.equals("6") ) {
              FetchOceanMarketInfos(SIA_ASSET_ID,BTC_ASSET_ID);
            }
            if ( subinput.equals("s6") ) {
              MakeTheSellOrder(SIA_ASSET_ID,BTC_ASSET_ID);
            }
            if ( subinput.equals("b6") ) {
              MakeTheBuyOrder(SIA_ASSET_ID,BTC_ASSET_ID);
            }
            if ( subinput.equals("7") ) {
              FetchOceanMarketInfos(EOS_ASSET_ID,XIN_ASSET_ID);
            }
            if ( subinput.equals("s7") ) {
              MakeTheSellOrder(EOS_ASSET_ID,XIN_ASSET_ID);
            }
            if ( subinput.equals("b7") ) {
              MakeTheBuyOrder(EOS_ASSET_ID,XIN_ASSET_ID);
            }
            if ( subinput.equals("8") ) {
              FetchOceanMarketInfos(ETH_ASSET_ID,XIN_ASSET_ID);
            }
            if ( subinput.equals("s8") ) {
              MakeTheSellOrder(ETH_ASSET_ID,XIN_ASSET_ID);
            }
            if ( subinput.equals("b8") ) {
              MakeTheBuyOrder(ETH_ASSET_ID,XIN_ASSET_ID);
            }
            if ( subinput.equals("9") ) {
              FetchOceanMarketInfos(SIA_ASSET_ID,XIN_ASSET_ID);
            }
            if ( subinput.equals("s9") ) {
              MakeTheSellOrder(SIA_ASSET_ID,XIN_ASSET_ID);
            }
            if ( subinput.equals("b9") ) {
              MakeTheBuyOrder(SIA_ASSET_ID,XIN_ASSET_ID);
            }
            if ( subinput.equals("b1") ) {
              System.out.print("Please input the BTC price base USDT: ");
              String pinput = System.console().readLine();
              System.out.println(pinput);

              System.out.print("Please input the USDT amount: ");
              String aminput = System.console().readLine();
              System.out.println(aminput);
              float amountf = Float.valueOf(aminput.trim()).floatValue();
              String buyMemo = GenerateOrderMemo("B",BTC_ASSET_ID,pinput);
              MixinAPI mixinApiUser = generateAPI_FromCSV();
              // UUID usdtUUID         =  UUID.fromString(USDT_ASSET_ID);
              // String memoTarget     = encodeUUID(usdtUUID);
              System.out.println("------------------Ocean.one-USDT-BTC-EXCHANGE----------------------------");
              System.out.println(buyMemo);
              JsonObject asset = mixinApiUser.getAsset(USDT_ASSET_ID);
              System.out.println(asset);
              System.out.println(asset.get("balance").getAsFloat());
              if ( asset.get("balance").getAsFloat()  >= 1 && asset.get("balance").getAsFloat() >= amountf ) {
                  JsonObject transInfo = mixinApiUser.transfer(USDT_ASSET_ID, OCEANONE_BOT,
                                                             aminput,
                                                             buyMemo);
                  System.out.println("------------------------BTC Transfer To EXCHANGE Information----------------------");
                  System.out.println(transInfo);
                  System.out.println("-----------------------------------------------------------------------");
               } else System.out.println("----------------Not enough USDT--------------------------------------------");
            }
            if ( subinput.equals("s1") ) {
              System.out.print("Please input the BTC price base USDT: ");
              String pinput = System.console().readLine();
              System.out.println(pinput);

              System.out.print("Please input the BTC amount: ");
              String aminput = System.console().readLine();
              System.out.println(aminput);
              float amountf = Float.valueOf(aminput.trim()).floatValue();

              String buyMemo = GenerateOrderMemo("A",USDT_ASSET_ID,pinput);
              MixinAPI mixinApiUser = generateAPI_FromCSV();
              // UUID usdtUUID         =  UUID.fromString(USDT_ASSET_ID);
              // String memoTarget     = encodeUUID(usdtUUID);
              System.out.println("------------------Ocean.one-USDT-BTC-EXCHANGE----------------------------");
              System.out.println(buyMemo);
              JsonObject asset = mixinApiUser.getAsset(BTC_ASSET_ID);
              System.out.println(asset);
              System.out.println(asset.get("balance").getAsFloat());
              if ( asset.get("balance").getAsFloat()  > 0 && asset.get("balance").getAsFloat() >= amountf ) {
                  JsonObject transInfo = mixinApiUser.transfer(BTC_ASSET_ID, OCEANONE_BOT,
                                                             aminput,
                                                             buyMemo);
                  System.out.println("------------------------BTC Transfer To EXCHANGE Information----------------------");
                  System.out.println(transInfo);
                  System.out.println("-----------------------------------------------------------------------");
               } else System.out.println("----------------Not enough BTC--------------------------------------------");
            }
            if ( subinput.equals("c") ) {
              System.out.print("Please input order id(trace id): ");
              String pinput = System.console().readLine();
              System.out.println(pinput);
              String OrderMemo = GenerateOrderCancelMemo(pinput);
              MixinAPI mixinApiUser = generateAPI_FromCSV();
              // UUID usdtUUID         =  UUID.fromString(USDT_ASSET_ID);
              // String memoTarget     = encodeUUID(usdtUUID);
              System.out.println("------------------Ocean.one-USDT-BTC-EXCHANGE----------------------------");
              System.out.println(OrderMemo);
              JsonObject asset = mixinApiUser.getAsset(CNB_ASSET_ID);
              System.out.println(asset);
              System.out.println(asset.get("balance").getAsFloat());
              if ( asset.get("balance").getAsFloat()  > 0 ) {
                  JsonObject transInfo = mixinApiUser.transfer(CNB_ASSET_ID, OCEANONE_BOT,
                                                             "0.00001",
                                                             OrderMemo);
                  System.out.println("------------------------BTC Transfer To EXCHANGE Information----------------------");
                  System.out.println(transInfo);
                  System.out.println("-----------------------------------------------------------------------");
               } else System.out.println("----------------Not enough CNB--------------------------------------------");
            }
          } while ( true );
        }
      } while ( true );
    }
    private static MixinAPI generateAPI_FromCSV() {
      try {
       Reader reader = Files.newBufferedReader(Paths.get(WALLET_FILANAME));
       CSVParser csvParser = new CSVParser(reader, CSVFormat.DEFAULT);
       PrivateKey privKey = null;
       for (CSVRecord csvRecord : csvParser) {
         // System.out.println("Name : " + csvRecord.get(0));
         byte[] encoded = Base64.getDecoder().decode(csvRecord.get(0));
         PKCS8EncodedKeySpec keySpec = null;
         keySpec = new PKCS8EncodedKeySpec(encoded);

         KeyFactory kf = KeyFactory.getInstance("RSA");
         privKey = kf.generatePrivate(keySpec);
         return new MixinAPI(csvRecord.get(3), "do not need",
                                           "123456", csvRecord.get(2), csvRecord.get(1),
                                           (RSAPrivateKey) privKey);
       }
     } catch(Exception e) { e.printStackTrace(); }
     return null;
   }
   private static JsonArray FetchExinOneMarketInfos(String url) {
     OkHttpClient client = new OkHttpClient();
     String baseUrl = "https://exinone.com/exincore/markets?base_asset=";
     String fullUrl = baseUrl + url;
     Request request = new Request.Builder()
                                .url(fullUrl)
                                .build();
     try {
        Response response = client.newCall(request).execute();
        if (!response.isSuccessful()) {
          throw new IOException("Unexpected code " + response);
        }
        return processJsonObjectWithDataOrError(response.body().string());
      } catch(Exception e) { e.printStackTrace(); }
      return null;
  }
  private static void FetchOceanMarketInfos(String targetAssetID, String baseAssetID) {
    OkHttpClient client = new OkHttpClient();
    String baseUrl = "https://events.ocean.one/markets/%s-%s/book ";
    String fullUrl = String.format(baseUrl,targetAssetID,baseAssetID);
    // String fullUrl = baseUrl + url;
    System.out.println(fullUrl);
    Request request = new Request.Builder()
                               .url(fullUrl)
                               .build();
    try {
       Response response = client.newCall(request).execute();
       if (!response.isSuccessful()) {
         throw new IOException("Unexpected code " + response);
       }
       String res = response.body().string();
       // System.out.println(res);
       JsonParser parser = new JsonParser();
       JsonElement jsonTree = parser.parse(res);
       JsonObject orders;
       orders =  jsonTree.getAsJsonObject();
       JsonArray asksOrders = orders.get("data").getAsJsonObject().get("data").getAsJsonObject().get("asks").getAsJsonArray();
       JsonArray bidsOrders = orders.get("data").getAsJsonObject().get("data").getAsJsonObject().get("bids").getAsJsonArray();
       // System.out.println(orders.get("data").getAsJsonObject().get("data").getAsJsonObject().get("bids").getAsJsonArray());
       System.out.println("--Side--Price--Amount--Funds---");
       asksOrders.forEach((element) ->  {
          JsonObject jsonObj = element.getAsJsonObject();
          System.out.println(jsonObj.get("side").getAsString() + " " +
                             jsonObj.get("price").getAsString() + " " +
                             jsonObj.get("amount").getAsString() + " " +
                             jsonObj.get("funds").getAsString() );
       });
       bidsOrders.forEach((element) ->  {
          JsonObject jsonObj = element.getAsJsonObject();
          System.out.println(jsonObj.get("side").getAsString() + " " +
                             jsonObj.get("price").getAsString() + " " +
                             jsonObj.get("amount").getAsString() + " " +
                             jsonObj.get("funds").getAsString() );
       });
       System.out.println("----endo--of--btc/usdt----");
       return;
     } catch(Exception e) { e.printStackTrace(); }
     return;
 }
  public static JsonArray processJsonObjectWithDataOrError(String res) {
    JsonParser parser = new JsonParser();
    JsonElement jsonTree = parser.parse(res);
    if ( jsonTree.isJsonObject() ) {
      if ( jsonTree.getAsJsonObject().get("data") != null ) {
         return  jsonTree.getAsJsonObject().get("data").getAsJsonArray();
      }
    }
    return null;
  }
  public static UUID decodeUUID(String btcEncode) {
    try {
      byte[] encoded = Base64.getDecoder().decode(btcEncode);
      MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(encoded);
      ByteBuffer out = ByteBuffer.wrap(new byte[21]);
      unpacker.readPayload(out);
      out.position(5);
      UUID getUUID = ByteBufferAsUuid( out.slice());
      unpacker.close();
      return getUUID;
    } catch (Exception e) { e.printStackTrace(); }
      return null;
  }
  public static String encodeUUID(UUID uuid) {
    try {
      byte[] byteUuid = asBytes(uuid);
      MessageBufferPacker packer = MessagePack.newDefaultBufferPacker();
      packer.writePayload(byteUuid);
      packer.close();
      byte[] packedData = packer.toByteArray();
      byte[] prex = { (byte)129, (byte)161, 65, (byte)196, 16 };
      ByteArrayOutputStream output = new ByteArrayOutputStream();
      output.write(prex);
      output.write(packedData);
      byte[] out = output.toByteArray();
      return Base64.getEncoder().encodeToString(out);
    } catch (Exception e) { e.printStackTrace(); }
      return null;
  }
  public static UUID ByteBufferAsUuid(ByteBuffer bb) {
    // ByteBuffer bb = ByteBuffer.wrap(bytes);
    long firstLong = bb.getLong();
    long secondLong = bb.getLong();
    return new UUID(firstLong, secondLong);
  }
  public static byte[] asBytes(UUID uuid) {
    ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
    bb.putLong(uuid.getMostSignificantBits());
    bb.putLong(uuid.getLeastSignificantBits());
    return bb.array();
  }
  public static String GenerateOrderMemo(String Side, String myUuid, String Price) {
    try {
      MessageBufferPacker m = MessagePack.newDefaultBufferPacker();
      UUID AssetUUID  =  UUID.fromString(myUuid);
      Value map = ValueFactory.newMap(ValueFactory.newString("S"), ValueFactory.newString(Side),
                                      ValueFactory.newString("A"), ValueFactory.newBinary(asBytes(AssetUUID)),
                                      ValueFactory.newString("P"), ValueFactory.newString(Price),
                                      ValueFactory.newString("T"), ValueFactory.newString("L") );
      m.packValue(map);
      return Base64.getEncoder().encodeToString(m.toByteArray());
    } catch (Exception e) { e.printStackTrace(); }
      return "";
  }
  public static String GenerateOrderCancelMemo(String myUuid) {
    try {
      MessageBufferPacker m = MessagePack.newDefaultBufferPacker();
      UUID AssetUUID  =  UUID.fromString(myUuid);
      Value map = ValueFactory.newMap(
                                      ValueFactory.newString("O"), ValueFactory.newBinary(asBytes(AssetUUID)) );
      m.packValue(map);
      return Base64.getEncoder().encodeToString(m.toByteArray());
    } catch (Exception e) { e.printStackTrace(); }
      return "";
  }
  public static void MakeTheSellOrder(String AssetID, String BaseAssetID) {
    System.out.print(String.format("Please input the %s price of %s: ",AssetID,BaseAssetID));
    String pinput = System.console().readLine();
    System.out.println(pinput);

    System.out.print(String.format("Please input the %s amount: ",AssetID));
    String aminput = System.console().readLine();
    System.out.println(aminput);
    float amountf = Float.valueOf(aminput.trim()).floatValue();

    String OrderMemo = GenerateOrderMemo("A",BaseAssetID,pinput);
    MixinAPI mixinApiUser = generateAPI_FromCSV();
    // UUID usdtUUID         =  UUID.fromString(USDT_ASSET_ID);
    // String memoTarget     = encodeUUID(usdtUUID);
    System.out.println("------------------Ocean.one-EXCHANGE----------------------------");
    System.out.println(OrderMemo);
    JsonObject asset = mixinApiUser.getAsset(AssetID);
    System.out.println(asset);
    System.out.println(asset.get("balance").getAsFloat());
    if ( asset.get("balance").getAsFloat()  > 0 && asset.get("balance").getAsFloat() >= amountf ) {
        JsonObject transInfo = mixinApiUser.transfer(AssetID, OCEANONE_BOT,
                                                     aminput,
                                                     OrderMemo);
        System.out.println(String.format("--------------%s Transfer To EXCHANGE Information---------",AssetID));
        System.out.println(transInfo);
        System.out.println(String.format("---Order is %s: ------",transInfo.get("").getAsString()));
     } else System.out.println(String.format("----------------Not enough %s--------------------------",AssetID));
  }

  public static void MakeTheBuyOrder(String AssetID, String BaseAssetID) {
    System.out.print(String.format("Please input the %s price of %s: ",AssetID,BaseAssetID));
    String pinput = System.console().readLine();
    System.out.println(pinput);

    System.out.print(String.format("Please input the %s amount: ",BaseAssetID));
    String aminput = System.console().readLine();
    System.out.println(aminput);
    float amountf = Float.valueOf(aminput.trim()).floatValue();

    String OrderMemo = GenerateOrderMemo("B",AssetID,pinput);
    MixinAPI mixinApiUser = generateAPI_FromCSV();
    // UUID usdtUUID         =  UUID.fromString(USDT_ASSET_ID);
    // String memoTarget     = encodeUUID(usdtUUID);
    System.out.println("------------------Ocean.one--EXCHANGE----------------------------");
    System.out.println(OrderMemo);
    JsonObject asset = mixinApiUser.getAsset(BaseAssetID);
    System.out.println(asset);
    System.out.println(asset.get("balance").getAsFloat());
    if ( asset.get("balance").getAsFloat()  > 0 && asset.get("balance").getAsFloat() >= amountf ) {
        JsonObject transInfo = mixinApiUser.transfer(BaseAssetID, OCEANONE_BOT,
                                                     aminput,
                                                     OrderMemo);
         System.out.println(String.format("--------------%s Transfer To EXCHANGE Information---------",BaseAssetID));
         System.out.println(transInfo);
         System.out.println(String.format("---Order is %s: ------",transInfo.get("").getAsString()));
      } else System.out.println(String.format("----------------Not enough %s--------------------------",BaseAssetID));
  }
}
