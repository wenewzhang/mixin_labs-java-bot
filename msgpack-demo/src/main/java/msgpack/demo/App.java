/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package msgpack.demo;
import java.util.Base64;
import java.util.UUID;
import org.msgpack.core.MessagePack;
import org.msgpack.core.MessagePack.PackerConfig;
import org.msgpack.core.MessagePack.UnpackerConfig;
import org.msgpack.core.MessageBufferPacker;
import org.msgpack.core.MessageFormat;
import org.msgpack.core.MessagePacker;
import org.msgpack.core.MessageUnpacker;
import org.msgpack.value.ArrayValue;
import org.msgpack.value.ExtensionValue;
import org.msgpack.value.FloatValue;
import org.msgpack.value.IntegerValue;
import org.msgpack.value.Value;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.ByteBuffer;
import java.util.Arrays;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonElement;
import com.google.gson.JsonArray;
import com.google.gson.Gson;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());
        UUID btcUUID = UUID.fromString("c6d0c728-2624-429b-8e0d-d9d19b6592fa");
        try {
          System.out.println(encodeUUID(btcUUID));
          System.out.println(decodeUUID("gaFBxBDG0McoJiRCm44N2dGbZZL6"));

          MessageBufferPacker packer2 = MessagePack.newDefaultBufferPacker();
          packer2
                  .packInt(1)
                  .packString("leo")
                  .packArrayHeader(2)
                  .packString("xxx-xxxx")
                  .packString("yyy-yyyy");
          packer2.close(); // Never forget to close (or flush) the buffer

          // Deserialize with MessageUnpacker
          MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(packer2.toByteArray());
          int id = unpacker.unpackInt();             // 1
          String name = unpacker.unpackString();     // "leo"
          int numPhones = unpacker.unpackArrayHeader();  // 2
          String[] phones = new String[numPhones];
          for (int i = 0; i < numPhones; ++i) {
              phones[i] = unpacker.unpackString();   // phones = {"xxx-xxxx", "yyy-yyyy"}
          }
          unpacker.close();

          System.out.println(String.format("id:%d, name:%s, phone:[%s]", id, name, phones));
          // String EnMemo = "hqFDzQPooVCnNTI0OC45OKFGqTAuMDAxMDQ5OKJGQcQQgVsLGidkNzaPqkLWlPpiCqFUoVKhT8QQeJyt3MrqSGOpbqzFXy5JUw==";
          String EnMemo = "hqFDzQPooVCmNS4zOTE3oUapMC4wMDUzOTE4okZBxBCBWwsaJ2Q3No+qQtaU+mIKoVShUqFPxBCbKSnU5adI8YV7+1WrrygY";
          decodeMemo(EnMemo);
        } catch(Exception e) { e.printStackTrace(); }
    }
    public static UUID asUuid(byte[] bytes) {
      ByteBuffer bb = ByteBuffer.wrap(bytes);
      long firstLong = bb.getLong();
      long secondLong = bb.getLong();
      return new UUID(firstLong, secondLong);
    }
    public static UUID ByteBufferAsUuid(ByteBuffer bb) {
      // ByteBuffer bb = ByteBuffer.wrap(bytes);
      long firstLong = bb.getLong();
      long secondLong = bb.getLong();
      return new UUID(firstLong, secondLong);
    }
    public static byte[] asBytes(UUID uuid) {
      ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
      bb.putLong(uuid.getMostSignificantBits());
      bb.putLong(uuid.getLeastSignificantBits());
      return bb.array();
    }
    public static void printBytes(ByteBuffer bb) {
      bb.rewind();
      System.out.println("Byte Buffer");
      while (bb.hasRemaining())
        System.out.println(bb.position() + "->" + bb.get() + " ");
      System.out.println("");
    }
    public static void printBytes2(byte[] bytes) {
      for (int i=0, len=bytes.length; i<len; i++) {
         if ( bytes[i] > 0 ) {
           System.out.println(bytes[i]);
         } else { System.out.println(bytes[i]+256);}
      }
    }
    public static UUID decodeUUID(String btcEncode) {
      try {
        byte[] encoded = Base64.getDecoder().decode(btcEncode);
        MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(encoded);
        ByteBuffer out = ByteBuffer.wrap(new byte[21]);
        unpacker.readPayload(out);
        out.position(5);
        UUID getUUID = ByteBufferAsUuid( out.slice());
        unpacker.close();
        return getUUID;
      } catch (Exception e) { e.printStackTrace(); }
        return null;
    }
    public static String encodeUUID(UUID uuid) {
      try {
        byte[] byteUuid = asBytes(uuid);
        MessageBufferPacker packer = MessagePack.newDefaultBufferPacker();
        packer.writePayload(byteUuid);
        packer.close();
        byte[] packedData = packer.toByteArray();
        byte[] prex = { (byte)129, (byte)161, 65, (byte)196, 16 };
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        output.write(prex);
        output.write(packedData);
        byte[] out = output.toByteArray();
        return Base64.getEncoder().encodeToString(out);
      } catch (Exception e) { e.printStackTrace(); }
        return null;
    }
    public static void decodeMemo(String memo) {
      try {
        byte[] encoded = Base64.getDecoder().decode(memo);
        int Len = encoded.length;
        MessageUnpacker unpacker = MessagePack.newDefaultUnpacker(encoded);
        // ByteBuffer out = ByteBuffer.wrap(new byte[Len]);
        Value memoVal = unpacker.unpackValue();
        JsonParser parser = new JsonParser();
        JsonElement jsonTree = parser.parse(memoVal.toJson());
        JsonObject memoObj = jsonTree.getAsJsonObject();
        // return jsonTree.getAsJsonObject()
        System.out.print(memoObj.get("C").getAsString() + " " +
                         memoObj.get("P").getAsString() + " " +
                         memoObj.get("F").getAsString() + " " +
                         memoObj.get("T").getAsString());
        // unpacker.readPayload(out);
        // printBytes(out);
        unpacker.close();
      } catch (Exception e) { e.printStackTrace(); }
    }
}
